name: ${APP_ID}
services:
  stripe-cli:
    image: stripe/stripe-cli
    container_name: ${APP_ID}-stripe-cli
    working_dir: /usr/src/app
    environment:
      STRIPE_API_KEY: ${STRIPE_API_KEY}
      STRIPE_DEVICE_NAME: ${STRIPE_DEVICE_NAME}
    volumes:
      - ./stripe-secrets:/usr/src/app/secrets
    entrypoint: >
      sh -c "
        stripe listen --api-key ${STRIPE_API_KEY} --device-name ${STRIPE_DEVICE_NAME} --print-secret > /usr/src/app/secrets/stripe_webhook_secret && 
        stripe listen --api-key ${STRIPE_API_KEY} --device-name ${STRIPE_DEVICE_NAME} --forward-to http://${SERVER_IPV4_ADDRESS}:${APP_SERVER_PORT}/stripe/webhook
      "
  docker:
    image: docker:27.0-dind
    container_name: ${APP_ID}-docker
    privileged: true
    environment:
      DOCKER_TLS_CERTDIR: "/certs"
    ports:
      - "${APP_DOCKER_PORT}:2376"
    volumes:
      - ./certs:/certs
    working_dir: /usr/src/app
    networks:
      gmrs-network:
        ipv4_address: ${DOCKER_IPV4_ADDRESS}
  firebase:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ${APP_ID}-firebase
    image: ${APP_ID}-firebase
    environment:
      APP_ENVIRONMENT: ${APP_ENVIRONMENT}
      APP_FIREBASE_PROJECT_ID: ${APP_FIREBASE_PROJECT_ID}
      SERVER_IPV4_ADDRESS: ${SERVER_IPV4_ADDRESS}
      SERVER_PORT: ${APP_SERVER_PORT}
      JWT_SECRET: ${JWT_SECRET}
    ports:
      - "${APP_FIREBASE_EMULATOR_AUTHENTICATION}:9099"
      - "${APP_FIREBASE_EMULATOR_UI}:4000"
      - "${APP_FIREBASE_EMULATOR_FUNCTIONS}:5001"
      - "${APP_FIREBASE_EMULATOR_FIRESTORE}:8080"
      - "${APP_FIREBASE_EMULATOR_STORAGE}:9199"
      - "${APP_FIREBASE_EMULATOR_HUB}:4400"
    entrypoint: >
      sh -c '
        [ "$APP_ENVIRONMENT" = "production" ] && GOOGLE_APPLICATION_CREDENTIALS="/usr/src/app/firebaseServiceAccount.json" firebase deploy --project "$APP_FIREBASE_PROJECT_ID" && exit 0 || firebase emulators:start --project "demo-$APP_FIREBASE_PROJECT_ID"
      '
    working_dir: /usr/src/app
    networks:
      gmrs-network:
        ipv4_address: ${APP_FIREBASE_IPV4_ADDRESS}
  server:
    build:
      context: ./server
      dockerfile: Dockerfile
    container_name: ${APP_ID}-server
    image: ${APP_ID}-server
    volumes:
      - ./certs:/certs
      - ./stripe-secrets:/usr/src/app/secrets
      - ./firebase.json:/usr/src/firebase.json
      - ./firebaseServiceAccount.json:/usr/src/firebaseServiceAccount.json
    environment:
      APP_ENVIRONMENT: ${APP_ENVIRONMENT}
      MACHINE_BUILD_IMAGE_NAME: ${APP_ID}

      DOCKER_IPV4_ADDRESS: ${DOCKER_IPV4_ADDRESS}
      APP_DOCKER_PORT: ${APP_DOCKER_PORT}

      APP_FIREBASE_PROJECT_ID: ${APP_FIREBASE_PROJECT_ID}
      APP_FIREBASE_IPV4_ADDRESS: ${APP_FIREBASE_IPV4_ADDRESS}
      APP_FIREBASE_EMULATOR_FIRESTORE: ${APP_FIREBASE_EMULATOR_FIRESTORE}
      APP_FIREBASE_EMULATOR_STORAGE: ${APP_FIREBASE_EMULATOR_STORAGE}

      STRIPE_API_KEY: ${STRIPE_API_KEY}
      STRIPE_WEBHOOK_SECRET_FILE: /usr/src/app/secrets/stripe_webhook_secret
      STRIPE_SUCCESS_URL: ${STRIPE_SUCCESS_URL}
      STRIPE_CANCEL_URL: ${STRIPE_CANCEL_URL}

      JWT_SECRET: ${JWT_SECRET}
    ports:
      - "${APP_SERVER_PORT}:1337"
    networks:
      gmrs-network:
        ipv4_address: ${SERVER_IPV4_ADDRESS}
  client:
    build:
      context: ./client
      dockerfile: Dockerfile
    volumes:
      - ./client/dist:/usr/src/app/dist
    container_name: ${APP_ID}-client
    image: ${APP_ID}-client
    environment:
      VITE_APP_ENVIRONMENT: ${APP_ENVIRONMENT}
      VITE_GOOGLE_MAPS_ID: ${GOOGLE_MAPS_ID}
      VITE_APP_FIREBASE_EMULATOR_STORAGE: ${APP_FIREBASE_EMULATOR_STORAGE}
      VITE_APP_FIREBASE_EMULATOR_AUTHENTICATION: ${APP_FIREBASE_EMULATOR_AUTHENTICATION}
      VITE_APP_FIREBASE_PROJECT_ID: ${APP_FIREBASE_PROJECT_ID}
      VITE_APP_FIREBASE_EMULATOR_FIRESTORE: ${APP_FIREBASE_EMULATOR_FIRESTORE}

      VITE_GOOGLE_MAPS_API_KEY: ${GOOGLE_MAPS_API_KEY}
    ports:
      - "${APP_CLIENT_PORT}:3000"
    entrypoint: >
      sh -c '
        [ "$APP_ENVIRONMENT" = "production" ] && npm run build && exit 0 || npm run start
      '
    networks:
      gmrs-network:
        ipv4_address: ${CLIENT_IPV4_ADDRESS}

networks:
  gmrs-network:
    external: true
